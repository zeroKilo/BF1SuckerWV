using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BF1SuckerWV
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("BF1 Sucker by Warranty Voider");
            Redirector.GetBackendIP();
            if(Redirector.backend_ip != null)
                Backend.Start();

            //byte[] dump = new byte[] { 0x00, 0x00, 0x02, 0x15, 0x00, 0x00, 0x00, 0x19, 0x00, 0x04, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x87, 0x4B, 0x6B, 0x00, 0x00, 0x8A, 0x99, 0x00, 0x00, 0x00, 0x8A, 0x99, 0x2C, 0x04, 0x03, 0x08, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0x8F, 0xD1, 0xD6, 0xC0, 0xC9, 0x3A, 0xBA, 0x1B, 0x65, 0x01, 0x0D, 0x41, 0x4C, 0x2D, 0x2D, 0x57, 0x41, 0x57, 0x57, 0x59, 0x2D, 0x2D, 0x6C, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0x85, 0x8E, 0xC7, 0xDF, 0xC2, 0x3A, 0xBA, 0x1B, 0x65, 0x01, 0x0C, 0x43, 0x68, 0x61, 0x70, 0x70, 0x69, 0x65, 0x31, 0x38, 0x32, 0x30, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0x97, 0xFB, 0x97, 0xAC, 0xB9, 0x3A, 0xBA, 0x1B, 0x65, 0x01, 0x11, 0x59, 0x61, 0x73, 0x65, 0x72, 0x5F, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5F, 0x59, 0x4F, 0x55, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0x88, 0xCF, 0xCA, 0xA7, 0xC5, 0x3A, 0xBA, 0x1B, 0x65, 0x01, 0x11, 0x77, 0x75, 0x68, 0x75, 0x66, 0x65, 0x69, 0x78, 0x69, 0x6E, 0x67, 0x79, 0x75, 0x61, 0x6E, 0x6E, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0x9A, 0xAB, 0xEF, 0x84, 0xBD, 0x3A, 0xBA, 0x1B, 0x65, 0x01, 0x0D, 0x4D, 0x69, 0x63, 0x6B, 0x65, 0x79, 0x4D, 0x6F, 0x75, 0x73, 0x65, 0x30, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0x9D, 0xF9, 0xDE, 0xC0, 0x04, 0xBA, 0x1B, 0x65, 0x01, 0x09, 0x41, 0x42, 0x4E, 0x2D, 0x44, 0x41, 0x52, 0x41, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0xA0, 0x9D, 0x92, 0xF1, 0x0D, 0xBA, 0x1B, 0x65, 0x01, 0x0C, 0x41, 0x4C, 0x2D, 0x2D, 0x57, 0x41, 0x57, 0x57, 0x59, 0x2D, 0x2D, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x87, 0x4D, 0x32, 0x00, 0x00, 0xC2, 0xC8, 0x74, 0x00, 0x00, 0xD7, 0x39, 0x72, 0x03, 0x97, 0x88, 0xA2, 0x02, 0x00, 0x97, 0x8A, 0x64, 0x00, 0x00, 0xA6, 0x40, 0x00, 0x00, 0xBA, 0x93, 0x89, 0xAE, 0xB9, 0x3A, 0xBA, 0x1B, 0x65, 0x01, 0x0A, 0x43, 0x53, 0x5F, 0x53, 0x65, 0x6E, 0x70, 0x61, 0x69, 0x00, 0xBA, 0x1C, 0xF0, 0x01, 0x01, 0x00, 0x00, 0x00, 0xA2, 0x1C, 0xE8, 0x00, 0xBB, 0xA1, 0x9A, 0xEE, 0x13, 0xB2, 0x99, 0x00, 0x03, 0xB2, 0xEB, 0x40, 0x01, 0x0B, 0x66, 0x72, 0x69, 0x65, 0x6E, 0x64, 0x4C, 0x69, 0x73, 0x74, 0x00, 0xD3, 0x9C, 0x25, 0x00, 0x01, 0x00, 0xDA, 0x1B, 0x24, 0x00, 0x01 };
            //Blaze.Packet p = new Blaze.Packet(new MemoryStream(dump));
            ////Blaze.Packet p = new Blaze.Packet(new MemoryStream(Blaze_AssociationLists.MakeSubscribeToListsPacket()));
            //Console.WriteLine(p.Print());

            Console.ReadLine();
        }
    }
}
